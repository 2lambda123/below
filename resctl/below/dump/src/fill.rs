// Copyright (c) Facebook, Inc. and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use super::*;

// The function in dfill always in a pattern of: iterate over all fields and
// do something for each matched field. This trait will be auto generated by
// BelowDecor. Please refer to tmain.rs for a bigger picture.
pub trait Dfill
where
    Self: DumpType,
{
    // During the initialization, we will build our print function in order of user's
    // input and push it into a vec. During rendering, we will iterate over the function
    // instead of a giant match.
    fn build_title_fns(&mut self, opt: &Option<Vec<Self::FieldsType>>);
    fn build_title_fns_styled(&mut self, opt: &Option<Vec<Self::FieldsType>>);
    fn build_field_fns(&mut self, opt: &Option<Vec<Self::FieldsType>>);
    fn build_field_fns_styled(&mut self, opt: &Option<Vec<Self::FieldsType>>);
    fn sort_by(items: &mut Vec<&Self::Model>, tag: &Self::FieldsType, reverse: bool);
    fn filter_by(&self, item: &Self::Model, tag: &Self::FieldsType, re: &Regex) -> bool;
}
